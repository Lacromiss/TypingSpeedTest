@model KlavyeTest.Controllers.TypingTestViewModel
@using Newtonsoft.Json

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Klavye Hız Testi - Modern Tasarım</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
   
</head>
<body>

    <div class="container">
        <h1>Klavye Hız Testi</h1>

        <form method="get" asp-action="Index">
            <label for="language">Dil seçin:</label>
            <select name="language" id="language">
                @foreach (var lang in Model.AvailableLanguages)
                {
                    <option value="@lang.Code.Trim()" selected="@(Model.SelectedLanguage.Trim() == lang.Code.Trim())">
                        @lang.Name
                    </option>
                }
            </select>

            <label for="durationInSeconds">Müddət:</label>
            <select name="durationInSeconds" id="durationInSeconds">
                <option value="30" selected="@(Model.DurationInSeconds == 30)">30 saniyə</option>
                <option value="45" selected="@(Model.DurationInSeconds == 45)">45 saniyə</option>
                <option value="60" selected="@(Model.DurationInSeconds == 60)">60 saniyə</option>
                <option value="90" selected="@(Model.DurationInSeconds == 90)">90 saniyə</option>
            </select>

            <button type="submit">Testi Yenilə</button>
        </form>

        <div id="word-container"></div>

        <div class="controls">
            <input type="text" id="input-box" placeholder="Buraya yazmağa başlayın..." autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />
            <div id="timer">@TimeSpan.FromSeconds(Model.DurationInSeconds).ToString(@"m\:ss")</div>
            <button id="restart-btn" title="Yenidən Başlat">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
                    <path d="M463.5 224H472c13.3 0 24-10.7 24-24V72c0-9.7-5.8-18.5-14.8-22.2s-19.3-1.7-26.2 5.2L413.4 96.6c-87.6-86.5-228.7-86.2-315.8 1c-87.5 87.5-87.5 229.3 0 316.8s229.3 87.5 316.8 0c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-62.5 62.5-163.8 62.5-226.3 0s-62.5-163.8 0-226.3c62.2-62.2 162.7-62.5 225.3-1L327 183c-6.9 6.9-8.9 17.2-5.2 26.2s12.5 14.8 22.2 14.8H463.5z"/>
                </svg>
            </button>
        </div>

        <div id="results"></div>
    </div>

    <script>
        // JS KODU DEĞİŞTİRİLMEDİ - SADECE SONUÇ GÖSTERİMİNE KÜÇÜK BİR EFEKT EKLENDİ
        const words = @Html.Raw(JsonConvert.SerializeObject(Model.Words));
        const TEST_DURATION = @Model.DurationInSeconds;

        const wordContainer = document.getElementById('word-container');
        const inputBox = document.getElementById('input-box');
        const timerEl = document.getElementById('timer');
        const resultsEl = document.getElementById('results');
        const restartBtn = document.getElementById('restart-btn');

        let timer;
        let timeLeft = TEST_DURATION;
        let testStarted = false;
        let currentWordIndex = 0;
        let correctWordsCount = 0;
        let totalChars = 0;
        let correctChars = 0;

        function initializeTest() {
            clearInterval(timer);
            timeLeft = TEST_DURATION;
            testStarted = false;
            currentWordIndex = 0;
            correctWordsCount = 0;
            totalChars = 0;
            correctChars = 0;


            timerEl.textContent = `${Math.floor(TEST_DURATION / 60).toString().padStart(1, '0')}:${(TEST_DURATION % 60).toString().padStart(2, '0')}`;
            resultsEl.innerHTML = '';
            resultsEl.classList.remove('visible');
            inputBox.value = '';
            inputBox.disabled = false;

            wordContainer.innerHTML = '';
            // Test için kelime sayısını artırarak taşma (overflow) durumunu daha iyi gözlemleyebiliriz
            const shuffledWords = words.sort(() => Math.random() - 0.5).slice(0, 150);
            shuffledWords.forEach(word => {
                const span = document.createElement('span');
                span.textContent = word + " ";
                wordContainer.appendChild(span);
            });

            wordContainer.children[0].classList.add('current');
            inputBox.focus();
        }

        inputBox.addEventListener('input', (e) => {
            if (!testStarted && inputBox.value.length > 0) {
                startTimer();
                testStarted = true;
            }
            
            const currentWordSpan = wordContainer.children[currentWordIndex];
            if (!currentWordSpan) return;

            const typedValue = inputBox.value;
            const currentWord = currentWordSpan.textContent.trim();

            if (typedValue.endsWith(' ')) {
                // Kelime bittiğinde kontrol et
                const typedWord = typedValue.trim();
                
                totalChars += (currentWord.length + 1); // boşluk dahil

                if (typedWord === currentWord) {
                    currentWordSpan.classList.add('correct');
                    correctWordsCount++;
                    correctChars += (currentWord.length + 1);
                } else {
                    currentWordSpan.classList.add('incorrect');
                }

                currentWordSpan.classList.remove('current');
                currentWordIndex++;

                if (currentWordIndex < wordContainer.children.length) {
                    const nextWordSpan = wordContainer.children[currentWordIndex];
                    nextWordSpan.classList.add('current');
                    // Bir sonraki kelimeyi görünür alana kaydır
                    nextWordSpan.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }

                inputBox.value = '';
            } else {
                 // Yazarken anlık geri bildirim
                if (currentWord.startsWith(typedValue)) {
                    currentWordSpan.style.backgroundColor = 'var(--current-bg)';
                } else {
                    currentWordSpan.style.backgroundColor = '#ffcdd2'; // Hata sinyali için hafif kırmızı
                }
            }
        });

        function startTimer() {
            timer = setInterval(() => {
                timeLeft--;
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerEl.textContent = `${minutes.toString().padStart(1, '0')}:${seconds.toString().padStart(2, '0')}`;

                if (timeLeft <= 0) {
                    endTest();
                }
            }, 1000);
        }

        function endTest() {
            clearInterval(timer);
            inputBox.disabled = true;
            // WPM hesaplaması genellikle (doğru yazılan karakter sayısı / 5) / geçen dakika olarak hesaplanır.
            const grossWpm = (correctChars / 5) / (TEST_DURATION / 60);
            const accuracy = totalChars > 0 ? ((correctChars / totalChars) * 100).toFixed(2) : 0;
            
            resultsEl.innerHTML = `
                <h2>Test Bitti!</h2>
                <p>Sürət: <strong>${Math.round(grossWpm)} WPM</strong></p>
                <p>Dəqiqlik: <strong>${accuracy}%</strong></p>
                <p>Doğru/Yanlış Söz: <strong>${correctWordsCount}/${currentWordIndex - correctWordsCount}</strong></p>
            `;
            resultsEl.classList.add('visible');
        }

        restartBtn.addEventListener('click', initializeTest);
        initializeTest();
    </script>
</body>
</html>